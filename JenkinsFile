pipeline {

    agent {
        docker {
            image 'abhishekf5/maven-abhishek-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
        }
    }

    stages {

        stage('Build and Test') {

            steps {
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }

         stage('Static Code Analysis') {
           environment {
             SONAR_URL = "http://54.237.228.110:9000"
           }
           steps {
            withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }

      stage('Build and Push Docker Image') {
        // environment {
        //     DOCKER_IMAGE = "hesham/cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
           // REGISTRY_CREDENTIALS = credentials('docker-cred')
      
        steps {
            script {
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t hesham-repo .'
                sh 'docker tag hesham-repo:latest public.ecr.aws/y8h8o1j3/hesham-repo:latest'
                sh 'docker push public.ecr.aws/y8h8o1j3/hesham-repo:latest'
        //        def dockerImage = docker.image("${DOCKER_IMAGE}")
            //     docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            //         dockerImage.push()
            //         docker push public.ecr.aws/y8h8o1j3/hesham-repo:latest
            // }
        }
      }
    }
    }
}
